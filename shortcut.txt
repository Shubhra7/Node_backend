1. Proxy --> [Handle CORS (Cross Origin Problem)]
	for Create by CRP --> 
		add in package = "proxy":"https://localhost:4000"
	when made by vite --->
		in vite.config.js = proxy{
					'/api':'https://localhost:4000"
					}
==>  within vite.config.js
	server:{
    proxy:{
      '/api':'http://localhost:3000',
    },
  },


2. intall axios to handle api rather than fetch()
3. npm i mongoose 
4. npm i express

// professional Setup   (video: 7)
5. .gitkeep
6. .gitignore (search ==> .gitignore generator => node modules paste)

7. *** nodemon ==> npm i -D nodemon [help server to restart when file are saved]	
	Nodemon is a utility tool for Node.js applications that automatically monitors changes in your 	source code and restarts the application when changes are detected. It is particularly useful 	during development, as it eliminates the need to manually stop and restart the server every time 	you make a code change.

9. for staring point ____ "dev":"nodemon src/index.js"
	*******	// "dev": "nodemon -r dotenv/config --experimental-json-modules src/index.js" ****

8. make module base ==> IN package.json-> "type": "module"

9. npm i -D prettier (when working in team maintain the save coding style)

--> .prettierrc
{
    "singleQuote": false,
    "bracketSpacing": true,
    "tabWidth": 2,
    "trailingComma": "es5",
    "semi": true
}

--> .prettierignore
/.vscode
/node_modules
./dist

*.env
.env
.env.*


10) npm i mongoose express dotenv

11) npm i cookie-parser cors 

12) Model Link: https://app.eraser.io/workspace/YtPqZ1VogxGy1jzIDkzj (chai aur code project)

13) INSTALL MONGODB Aggregation function :....
     ..............>>>>>>  npm install mongoose-aggregate-paginate-v2


# Password handling (Cryptography)
14) npm i bcrypt [ bcrypt help to hash our password]
15) npm i jsonwebtoken  [for implement the JSON web tokens] https://jwt.io/introduction

#For file upload, Image upload
16) npm i cloudinary
17) npm i multer

link for rest of the controller and routers
18) https://github.com/Hruthik-28/youtube-twitter?tab=readme-ov-file







A. What is a Cookie (in Web)?
A cookie is a small piece of data (like a key-value pair) that a server sends to your browser. Your browser stores it and sends it back to the server with every future request to the same domain.

JWT is the format of the token (the actual auth data)

Cookie is a storage/transport method for data like JWTs

You can store a JWT in a cookie to build secure, stateless auth


B. ðŸ”„ Token Flow (Typical):
User logs in â†’ Gets access token + refresh token.

Access token is used in requests.

When access token expires:

Client uses the refresh token to get a new access token (and sometimes a new refresh token).

If refresh token also expires or is revoked â†’ User must log in again.


C. cookies need during logout because we need to get the reference of the logged in user, so in cookies--> has accesstoken--> get it and fetch the access token user._id to fetch the data from DB

D. default export: 
	-only one exporting element can present.
	-no {}
	- can vary name	

   named export:
	- multiple exporting element can present.
 	- must use {}
	- exact name mandatory

E. mondoDB connection file:

db--> index.js

import mongoose, { mongo } from "mongoose";
import { DB_NAME } from "../constants.js";

const connectDB = async () =>{
    try{
        const connectionInstance = await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`)
        console.log(`\n MongoDB connected !! DB HOST: ${connectionInstance.connection.host}`);
        
    } catch(error){
        console.log("MongoDB connection failed",error);
        process.exit(1)
    }
}

export default connectDB



